#!/bin/sh

# usage:
# artist title outfile
#
# we might find several different lyrics for a song. This is handled
# by this script: We use a subdirectory outfile.new. If it exists
# and contains a file, we just return that file and remove it from
# outfile.new. If outfile.new is empty, we read all versions again
# with googlyrics.

# ultimately I want to integrate this shell script into mgLyrics.py

artist="$1"
title="$2"
outfile="$3"
orgoutfile=`echo "$3" | sed 's/.tmp$//'`
outdir="$3.new"

echo > "$outfile".loading

if test ! -d "$outdir"
then
	mkdir "$outdir"
	MGLYRICS="`dirname $0`/mgLyric.py"
	if test ! -x "$MGLYRICS"
	then
		echo $MGLYRICS not found > "$outdir"/1.raw
	else
		"$MGLYRICS" "$title" "$artist" "$outdir" 
	fi

	for i in "$outdir"/*.raw
	do	
		test -r "$i" || break
		cat "$i" |
		sed 's/\x0d//g' |
		sed 's/\xc2\xb4/\x27/g' |
		sed 's/\xc3\x82\x27/\x27/g' |
		sed 's/\xc3\x82/\x27/g' |
		sed 's/\xc3\xb9/\x27/g' |
		sed 's/\xe2\x80\x99/\x27/g' |
		grep -ive 'NEW.*ringtones' |
		grep -v -e '--------------' |
		recode HTML..utf8 |
		sed 's/\xc2\x91/\x27/g' |	# in unicode, those two are reserved for
		sed 's/\xc2\x92/\x27/g' |   # private use, but still some sites use them...
		cat > "$i.converted" 2>/dev/null
		rm -f "$i"
		echo cmp -s "$i.converted" "$orgoutfile">>/tmp/log.wr
		cmp -s "$i.converted" "$orgoutfile"
		if test $? -eq 0
		then
			echo rm -f "$i.converted" >>/tmp/log.wr
			rm -f "$i.converted"
			continue
		fi
	done
fi

rmdir "$outdir" 2>/dev/null
if test -d "$outdir"
then
	ls -l  "$outdir"
	ls "$outdir"/*.converted | head -1 | while read fn
	do
		test -r "$fn" || break
		mv "$fn" "$outfile"
	done
	rmdir "$outdir" 2>/dev/null
fi
rm -f "$outfile".loading
